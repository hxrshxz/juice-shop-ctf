name: "CI Pipeline"
on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'images/**'
    tags-ignore:
      - '*'
  pull_request:
    branches:
      - develop
      - master
      - "*"
    paths-ignore:
      - '*.md'
      - 'LICENSE'
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v3
      - name: "Use Node.js 18"
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
      - name: "Install application"
        run: npm install --ignore-scripts
      - name: "Lint code"
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v3
      - name: "Use Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - name: "Cache Node.js modules"
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: "Install application"
        run: npm install && npm run build
      - name: "Execute unit tests"
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 2
          max_attempts: 3
          command: npm run node:test
  
  docker:
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v3
      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Install dependencies and build"
      run: |
        npm install
        npm run build





      - name: "Set tag & labels for ${{ github.ref }}"
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ]; then
          echo "DOCKER_TAG=latest" >> $GITHUB_ENV
          else
          echo "DOCKER_TAG=snapshot" >> $GITHUB_ENV
          fi
          echo "VCS_REF=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”`" >> $GITHUB_ENV
      - name: "Build and push"
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: false




  notify-slack:
    if: github.event_name == 'push' && (success() || failure())
    needs:
      - lint
      - docker
    runs-on: ubuntu-latest
    steps:
      - name: "Slack workflow notification"
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
